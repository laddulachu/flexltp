'use strict';

var moment = require('moment');
var fs = require('fs');

var config = require.main.require('./config');

var logger = require('./logger');
var stateManager = require('./stateManager');
var client = require('./client');
var browser = require('./phantomBrowser');

// API call to update a field on an onchange event.
// Input should be of form:
// {
//     model: "mainform",
//     isDynamic: true,
//     dynamicTimeout: 2000,
//     data : {
//        "section1.address": "123 Main St."
//     }
// }
exports.update = function(page, params) {
    if(params.isDynamic) {
        // We are expecting a DOM mutation to pick up the change,
        // but if it doesn't happen, we will wait for the update
        // timeout and then do a check state.
        page.update(params.model, params.data)
            .onTimer("_dynamicUpdateTimeout", params.dynamicTimeout)
            .checkState();
    } else {
        // This isn't a dynamic field, so we do an update and then
        // an immediate check state.
        page.update(params.model, params.data)
            .checkState();
    }
};

// API call to call an action.
// Passes in the model, the action to call and the data to update.
// {
//     model: "login",
//     action: "mainform.submit",
//     data: {
//         "mainform.username": "Administrator"
//         "mainform.password": "iamgod"
//     }
// }
exports.action = function(page, params) {
    page.update(params.model, params.data)
        .action(params.model, params.action);
};

/*
 * Method to take a snapshot of the current view of the screen.
 */
exports.snapshot = function (page, params) {
    logger.debug("util.snapshot");

    //Create root folder as required
    var sbRoot = './Snapshots';
    var filename = sbRoot + "/snapshot-" + moment().format("MMDDYY-HHmmss") + ".png";

    if (!fs.existsSync(sbRoot)) {
        fs.mkdirSync(sbRoot);
    }

    page.render(filename).then(function() {
        client.notification("util.snapshot")({filename: filename});
    });
};

/*
 * Method to report issues on app hang by taking a snapshot and dumping the HTML file
 */
exports.reportIssue = function(page, params) {
    logger.debug("util.reportIssues");

    //Create root folder as required
    var sbRoot = './Snapshots';
    var fileHTML = sbRoot + "/" + moment().format("MMDDYY-HHmmss") + "-HTML" + ".html";
    var fileSnapshot = sbRoot + "/" + moment().format("MMDDYY-HHmmss") + "-snapshot" + ".png";

    if (!fs.existsSync(sbRoot)) {
        fs.mkdirSync(sbRoot);
    }

    page.render(fileSnapshot)
        .evalSync(function() {
            var doc = (window.document) ? document.body.outerHTML : 'No window.document';
            return JSON.stringify({document: doc});
        })
        .data(function(data) {
            fs.writeFile(fileHTML, data.document, function(err) {
                if(err) {
                    return logger.info("Error dumping HTML", err);
                }
            });
        })
        .checkState();
};
